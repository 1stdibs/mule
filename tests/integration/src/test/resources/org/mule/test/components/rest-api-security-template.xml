<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
      xmlns:ss="http://www.springframework.org/schema/security"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
      xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
        http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/current/mule-spring-security.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <spring:beans>
        <ss:authentication-manager alias="authenticationManager">
            <ss:authentication-provider user-service-ref="userService">
<!--                <ss:user-service id="userService">
                    <ss:user name="marie" password="marie"
                             authorities="ROLE_ADMIN" />
                    <ss:user name="john" password="john"
                             authorities="ROLE_USER" />
                </ss:user-service>-->
            </ss:authentication-provider>
        </ss:authentication-manager>
    </spring:beans>

    <catch-exception-strategy name="baseExceptionStrategy" abstract="true">
        <template-configuration>
            <redefinable-attribute key="log.exception.message" doc:descripton="message to show in the exception logs"/>
        </template-configuration>
        <logger level="ERROR" message="$[log.exception.message]"/>
        <set-payload value="#[exception.message]"/>
        <template-stage name="customizePayload">
            <no-provided-content/>
            <no-expected-content/>
        </template-stage>
        <template-stage name="anotherCustomizePayload">
            <no-provided-content/>
            <no-expected-content/>
        </template-stage>
    </catch-exception-strategy>

    <mule-ss:security-manager>
        <mule-ss:delegate-security-provider name="memory-dao" delegate-ref="authenticationManager" />
    </mule-ss:security-manager>

    <http:connector name="baseHttpConnector" clientSoTimeout="300000" serverSoTimeout="300000" abstract="true"/>

    <flow name="baseHttpService" abstract="true">
        <template-configuration>
            <redefinable-attribute key="http.path" doc:descripton="context path to access the service"/>
            <redefinable-attribute key="required.role" defaultValue="ROLE_ADMIN" doc:descripton="role required to access the service"/>
            <redefinable-attribute key="service.name" defaultValue="generic service" doc:descripton="service name that we will sent out as part of the response headers"/>
            <redefinable-attribute key="http.error.status.code" defaultValue="500" doc:descripton="http status code to send in case of an error"/>
            <redefinable-attribute key="http.port" defaultValue="8080" doc:descripton="http status code to send in case of an error"/>
        </template-configuration>
        <http:inbound-endpoint host="localhost" port="$[http.port]" path="$[http.path]" />
        <json:json-to-object-transformer returnClass="java.lang.Object"/>
        <set-variable variableName="originalRequest" value="#[payload]"/>
        <http:basic-security-filter realm="mule-realm"/>
        <mule-ss:authorization-filter requiredAuthorities="$[required.role]"/>
        <logger level="ERROR" message="#[payload]"/>
        <scripting:component>
            <scripting:script engine="groovy">
                message.setProperty('username',((org.springframework.security.core.userdetails.User)eventContext.getSession().getSecurityContext().getAuthentication().getPrincipal()).getUsername(),org.mule.api.transport.PropertyScope.INVOCATION);
                message
            </scripting:script>
        </scripting:component>
        <set-variable variableName="currentUser" value="#[new org.mule.test.User(username)]"/>
        <choice>
            <when expression="#[currentUser.isActive()]">
                <logger level="DEBUG" message="user is active"/>
            </when>
            <otherwise>
                <expression-component>throw new org.mule.test.UserNotActiveException()</expression-component>
            </otherwise>
        </choice>
        <set-variable variableName="messages" value="#[[]]"/>
        <foreach collection="#[payload['people']]">
            <template-stage name="processMessage" doc:description="Stage for processing each of the people names sent by the client">
                <provided-content>
                    <payload type="java.lang.String" doc:description="A message provided by the user"/>
                    <flow-variable variableName="username" type="java.lang.String" doc:description="username of the current user"/>
                </provided-content>
                <expected-content>
                    <payload type="java.lang.String" doc:description="A message provided by the user"/>
                </expected-content>
            </template-stage>
            <expression-component>#[messages.add(payload)]</expression-component>
        </foreach>
        <!--<template-stage name="serviceImplementation">
            <documentation description="Place holder for service implementation.">
                <provided-content>
                    <flow-variable name="username" type="String" description="username for the authenticated user"/>
                </provided-content>
            </documentation>
        </template-stage>-->
        <set-payload value="#[['status':'ok', 'content': messages]]"/>
        <response>
            <set-property propertyName="X-SERVICE" value="#['service name: ' + templateProperties['service.name']]" />
            <json:object-to-json-transformer/>
        </response>
        <choice-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.test.usecases.UserNotActiveException)]">
                <set-payload value="#[['status' : 'error', 'message' : 'Your user must be active in order to access the service', 'originalRequest': originalRequest]]"/>
                <json:object-to-json-transformer/>
                <logger level="ERROR" message="#[payload]"/>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.api.security.NotPermittedException)]">
                <set-payload value="#[['status' : 'error', 'message' : 'You are not authorized to access this resource', 'originalRequest': originalRequest]]"/>
                <json:object-to-json-transformer/>
                <logger level="ERROR" message="#[payload]"/>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.api.security.UnauthorisedException)]">
                <set-payload value="#[['status' : 'error', 'message' : 'You must enter a valid username and password', 'originalRequest': originalRequest]]"/>
                <json:object-to-json-transformer/>
                <logger level="ERROR" message="#[payload]"/>
            </catch-exception-strategy>
            <catch-exception-strategy>
                <template-stage name="handleExceptionStage">
                    <provided-content>
                        <flow-variable variableName="username" type="java.lang.String" doc:description="username for the authenticated user"/>
                        <session-variable variableName="service" type="java.lang.String" doc:description="the name of the service that's being executed"/>
                        <property propertyName="http.status" type="java.lang.String" doc:description="the status code to return to the client"/>
                    </provided-content>
                    <no-expected-content/>
                    <http:response-builder status="400"/>
                    <set-payload value="#[['status' : 'error', 'message' : exception.message]]"/>
                    <json:object-to-json-transformer/>
                </template-stage>
            </catch-exception-strategy>
        </choice-exception-strategy>
    </flow>

</mule>