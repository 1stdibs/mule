<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
      xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.0/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.0/mule-http.xsd
        http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/3.0/mule-cxf.xsd
        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/3.0/mule-scripting.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.0/mule-vm.xsd">

    <description>
        This Synchronous variant of loan broker example is modeled on the Enterprise integration Patterns book sample.
        See: http://www.eaipatterns.com/ComposedMessagingExample.html
    </description>

    <!-- Flows and Services -->

    <!--
         The main loan broker flow that:
           i) Receives a customer request
           ii) Performs a lookup of the customer credit profile using a component binding
           iii) Determines the bank that should be used to request quotes using 'DefaultLender'
           iv) Uses an recipient list router to send quote requests to the selected banks and aggregates responses
           v) Selects the lowest quote from the list of quotes returned using the 'LowestQuoteProcessor'
     -->
    <flow name="loan-broker-sync">
        <composite-source>
            <inbound-endpoint ref="HttpUrlCustomerRequests"/>
            <!-- This endpoint is used by a test case to post java objects directly -->
            <inbound-endpoint ref="CustomerRequests"/>
        </composite-source>

        <component class="org.mule.example.loanbroker.DefaultLoanBroker">
            <binding interface="org.mule.example.loanbroker.creditagency.CreditAgencyService">
                <outbound-endpoint ref="CreditAgency" />
            </binding>
        </component>
        <expression-filter expression="payload.lenders.endpoint!=null" evaluator="groovy" />
        <recipient-list evaluator="groovy" expression="payload.lenders.endpoint" />
        <custom-processor class="org.mule.example.loanbroker.processor.LowestQuoteProcessor" />
    </flow>

    <!--
        The credit agency service will get the credit profile for a customer
     -->
    <simple-service name="TheCreditAgencyService" address="http://localhost:18080/mule/TheCreditAgencyService"
                    component-class="org.mule.example.loanbroker.creditagency.DefaultCreditAgency" type="jax-ws" />

    <!--
        These are mock bank services that represent remote bank loan services. One or more of these are
        invoked synchronously by the loan broker.
    -->
    <simple-service name="abstractBank" abstract="true" type="jax-ws"/>
    <simple-service name="bank1" parent="abstractBank" address="http://localhost:10080/mule/TheBank1">
        <component>
            <spring-object bean="bank1Bean"/>
        </component>
    </simple-service>
    <simple-service name="bank2" parent="abstractBank" address="http://localhost:20080/mule/TheBank2">
        <component>
            <spring-object bean="bank2Bean"/>
        </component>
    </simple-service>
    <simple-service name="bank3" parent="abstractBank" address="http://localhost:30080/mule/TheBank3">
        <component>
            <spring-object bean="bank3Bean"/>
        </component>
    </simple-service>
    <simple-service name="bank4" parent="abstractBank" address="http://localhost:40080/mule/TheBank4">
        <component>
            <spring-object bean="bank4Bean"/>
        </component>
    </simple-service>
    <simple-service name="bank5" parent="abstractBank" address="http://localhost:50080/mule/TheBank5">
        <component>
            <spring-object bean="bank5Bean"/>
        </component>
    </simple-service>

    <spring:bean name="bank1Bean" class="org.mule.example.loanbroker.bank.Bank">
        <spring:property name="bankName" value="Bank #1"/>
    </spring:bean>
    <spring:bean name="bank2Bean" class="org.mule.example.loanbroker.bank.Bank">
        <spring:property name="bankName" value="Bank #2"/>
    </spring:bean>
    <spring:bean name="bank3Bean" class="org.mule.example.loanbroker.bank.Bank">
        <spring:property name="bankName" value="Bank #3"/>
    </spring:bean>
    <spring:bean name="bank4Bean" class="org.mule.example.loanbroker.bank.Bank">
        <spring:property name="bankName" value="Bank #4"/>
    </spring:bean>
    <spring:bean name="bank5Bean" class="org.mule.example.loanbroker.bank.Bank">
        <spring:property name="bankName" value="Bank #5"/>
    </spring:bean>

    <!--  Global Endpoints -->

    <http:endpoint name="CustomerRequests" address="http://localhost:11080" exchange-pattern="request-response">
        <byte-array-to-object-transformer/>
    </http:endpoint>

    <http:endpoint name="HttpUrlCustomerRequests" address="http://localhost:11081"
                   exchange-pattern="request-response">
        <!-- Translate request params into properties map -->
        <http:body-to-parameter-map-transformer name="HttpRequestToMap"/>
        <!-- Create java objects for the LoanBroker requests-->
        <script:transformer>
            <script:script engine="groovy">
                import org.mule.example.loanbroker.message.*
                import org.mule.example.loanbroker.model.*

                //println "\n\n\n\n$payload"

                // remember 'payload' is a Map/String,String/ from the previous transformer
                def customerName = payload.name ?: "Muley" // fallback to defaults if no value provided in url
                def ssn = (payload.ssn ?: 1234) as Integer
                def amount = (payload.amount ?: 100000) as Integer
                def term = (payload.term ?: 48) as Integer

                def c = new Customer(customerName,  ssn)
                result = new CustomerQuoteRequest(c, amount, term)
            </script:script>
        </script:transformer>
        <response>
            <object-to-string-transformer/>
        </response>
    </http:endpoint>

    <endpoint name="CreditAgency" address="http://localhost:18080/mule/TheCreditAgencyService?method=getCreditProfile"
              exchange-pattern="request-response">
        <cxf:jaxws-client serviceClass="org.mule.example.loanbroker.creditagency.CreditAgencyService" />
    </endpoint>

    <http:endpoint name="Bank1" address="http://localhost:10080/mule/TheBank1?method=getLoanQuote">
        <cxf:jaxws-client serviceClass="org.mule.example.loanbroker.bank.BankService" />
    </http:endpoint>
    <http:endpoint name="Bank2" address="http://localhost:20080/mule/TheBank2?method=getLoanQuote">
        <cxf:jaxws-client serviceClass="org.mule.example.loanbroker.bank.BankService" />
    </http:endpoint>
    <http:endpoint name="Bank3" address="http://localhost:30080/mule/TheBank3?method=getLoanQuote">
        <cxf:jaxws-client serviceClass="org.mule.example.loanbroker.bank.BankService" />
    </http:endpoint>
    <http:endpoint name="Bank4" address="http://localhost:40080/mule/TheBank4?method=getLoanQuote">
        <cxf:jaxws-client serviceClass="org.mule.example.loanbroker.bank.BankService" />
    </http:endpoint>
    <http:endpoint name="Bank5" address="http://localhost:50080/mule/TheBank5?method=getLoanQuote">
        <cxf:jaxws-client serviceClass="org.mule.example.loanbroker.bank.BankService" />
    </http:endpoint>

</mule>
