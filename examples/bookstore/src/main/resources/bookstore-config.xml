<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
      xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
      xmlns:email="http://www.mulesoft.org/schema/mule/email"
      xmlns:servlet="http://www.mulesoft.org/schema/mule/servlet"
      xsi:schemaLocation="
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.1/mule.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.1/mule-vm.xsd
        http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/3.1/mule-cxf.xsd
        http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/3.1/mule-smtp.xsd
        http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/3.1/mule-email.xsd
        http://www.mulesoft.org/schema/mule/servlet http://www.mulesoft.org/schema/mule/servlet/3.1/mule-servlet.xsd">
    
    <context:property-placeholder location="email.properties"/>
    
    <!-- Configure some properties to work with GMail's SMTP -->
    <smtp:gmail-connector name="emailConnector" />
 
    <!-- Use this as a poor man's message queue, in the real world we would use JMS -->
    <vm:connector name="vmQueues"/>
    
    <!-- This queue contains a feed of the latest statistics generated by the Data Warehouse
         (it should really be a LIFO queue) -->
    <vm:endpoint name="stats" path="statistics" exchange-pattern="one-way"/>

    <message-properties-transformer name="setHtmlContentType" overwrite="true">
        <add-message-property key="Content-Type" value="text/html"/>
        <!-- Tomcat lowercases headers, need to drop this old one too -->
        <delete-message-property key="content-type"/>
    </message-properties-transformer>

    <model name="Bookstore">

          <service name="CatalogService">
               <inbound>
                    <!-- Public interface -->
                    <inbound-endpoint address="http://0.0.0.0:8777/services/catalog"
                        exchange-pattern="request-response">
                        <cxf:jaxws-service />
                    </inbound-endpoint>

                    <!-- Administration interface -->
                    <inbound-endpoint address="servlet://catalog" exchange-pattern="request-response">
                        <!-- Convert request parameters to Book object -->
                        <custom-transformer class="org.mule.example.bookstore.transformers.HttpRequestToBook"/>
                        <response>
                            <!-- Format response to be a nice HTML page -->
                            <custom-transformer class="org.mule.example.bookstore.transformers.AddBookResponse"/>
                            <!-- Force text/html, otherwise it falls back to request props, which have form-encoded one -->
                            <transformer ref="setHtmlContentType"/>
                        </response>
                    </inbound-endpoint>
               </inbound>
               <component>
                    <singleton-object class="org.mule.example.bookstore.CatalogServiceImpl" />
               </component>
          </service> 

          <service name="OrderService">
               <inbound>
                    <!-- Public interface -->
                    <inbound-endpoint address="http://0.0.0.0:8777/services/order" 
                        exchange-pattern="request-response">
                        <cxf:jaxws-service />
                    </inbound-endpoint>
               </inbound>
               <component>
                    <singleton-object class="org.mule.example.bookstore.OrderServiceImpl" />
               </component>
               <outbound>
                    <multicasting-router>
                        <vm:outbound-endpoint path="emailNotification" exchange-pattern="one-way"/>
                        <vm:outbound-endpoint path="dataWarehouse" exchange-pattern="one-way"/>
                    </multicasting-router>
               </outbound>
          </service>
          
          <service name="EmailNotificationService">
               <inbound>
                    <vm:inbound-endpoint path="emailNotification" exchange-pattern="one-way"/>
               </inbound>
               <outbound>
                    <pass-through-router>
                         <smtp:outbound-endpoint user="${user}" password="${password}" host="${host}" 
                             from="${from}" subject="Your order has been placed!">
                                <custom-transformer class="org.mule.example.bookstore.transformers.OrderToEmailTransformer" />
                                <email:string-to-email-transformer />
                         </smtp:outbound-endpoint>
                    </pass-through-router>
               </outbound>
          </service>
          
          <service name="DataWarehouse">
               <inbound>
                    <vm:inbound-endpoint path="dataWarehouse" exchange-pattern="one-way"/>
               </inbound>
               <component>
                    <singleton-object class="org.mule.example.bookstore.DataWarehouse" />
               </component>
               <outbound>
                    <pass-through-router>
                        <outbound-endpoint ref="stats">
                            <transformer ref="setHtmlContentType"/>
                        </outbound-endpoint>
                    </pass-through-router>
               </outbound>
          </service>
     </model>
</mule>
