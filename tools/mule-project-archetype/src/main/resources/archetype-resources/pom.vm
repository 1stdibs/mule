#set($D = '$')
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>${groupId}</groupId>
    <artifactId>${artifactId}</artifactId>
    <packaging>mule</packaging>
    <name>Mule ${ModuleName} ${ModuleType}</name>
    <version>${version}</version>
    <description>${description}</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <mule.version>${MuleVersion}</mule.version>
        <!-- Tools properties -->
        <eclipsePluginVersion>2.5</eclipsePluginVersion>
        <vmtype>org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType</vmtype>
        <jdk5Name>J2SE-1.5</jdk5Name>
        <jdk.version>1.5</jdk.version>
    </properties>

    <build>
        <!--
            Use a newer version of the install plugin than what your Maven uses by default. The
            older version failed to install the project if there was no target/classes folder.
            Since we use mule packaging on the project we actually create and attach the zip that
            must be installed.
        -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.3.1</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.mule.tools</groupId>
                <artifactId>maven-mule-plugin</artifactId>
                <version>1.6</version>
                <extensions>true</extensions>
                <configuration>
                    <copyToAppsDirectory>true</copyToAppsDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>${D}{jdk.version}</source>
                    <target>${D}{jdk.version}</target>
                    <encoding>ISO-8859-1</encoding>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <finalName>${D}{artifactId}-${D}{version}</finalName>
                    <descriptors>
                        <descriptor>assembly.xml</descriptor>
                    </descriptors>
                    <appendAssemblyId>false</appendAssemblyId>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>${D}{eclipsePluginVersion}</version>
                <configuration>
                    <!-- by default download all sources when generating project files -->
                    <downloadSources>true</downloadSources>
                    <classpathContainers>
                        <classpathContainer>org.eclipse.jdt.launching.JRE_CONTAINER/${D}{vmtype}/${D}{jdk5Name}
                        </classpathContainer>
                    </classpathContainers>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-idea-plugin</artifactId>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <jdkName>${D}{jdk.version}</jdkName>
                </configuration>
            </plugin>
            <!--
                make sure that MULE_HOME is set when building (required below when copying the
                artifact to Mule's apps directory
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.0-beta-1</version>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireProperty>
                                    <property>env.MULE_HOME</property>
                                    <message>You must set MULE_HOME before installing the example.</message>
                                </requireProperty>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
                automatically deploy the artifact after it has been built
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>package-example</id>
                        <phase>install</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <copy file="${D}{project.build.directory}/${D}{build.finalName}.zip"
                                    todir="${D}{env.MULE_HOME}/apps" overwrite="true"/>
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <!-- plugins for creating site reports -->
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <source>${D}{jdk.version}</source>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <configuration>
                    <configLocation>http://mulesoft.org/download/attachments/92/checkstyle.xml?version=1
                    </configLocation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <configuration>
                    <targetJdk>${D}{jdk.version}</targetJdk>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>taglist-maven-plugin</artifactId>
                <configuration>
                    <tags>
                        <tag>TODO</tag>
                        <tag>@todo</tag>
                        <tag>FIXME</tag>
                        <tag>@fixme</tag>
                        <tag>@deprecated</tag>
                    </tags>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <links>
                        <link>http://java.sun.com/j2ee/1.4/docs/api</link>
                        <link>http://java.sun.com/j2se/1.4.2/docs/api</link>
                        <link>http://java.sun.com/j2se/1.5.0/docs/api</link>
                    </links>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jdepend-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </reporting>

    <!-- Mule Dependencies -->
    <dependencies>
        <dependency>
            <groupId>org.mule</groupId>
            <artifactId>mule-core</artifactId>
            <version>${D}{mule.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- Xml configuration -->
        <dependency>
            <groupId>org.mule.modules</groupId>
            <artifactId>mule-module-spring-config</artifactId>
            <version>${D}{mule.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Mule Transports -->
#set($emailDepSet = false)
#set($sslDepSet = false)
#set($httpDepSet = false)
#set($jettyDepSet = false)
#set($rmiDepSet = false)
#foreach($item in $transportArray)
#if($item == 'smtp' || $item == 'smtps' || $item == 'pop3' || $item == 'pop3s' || $item == 'imap' || $item == 'imaps')
#if($emailDepSet == false)
        <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-email</artifactId>
            <version>${D}{mule.version}</version>
            <scope>provided</scope>
        </dependency>
#set($emailDepSet = true)
#end
#elseif($item == 'ssl' || $item == 'tls')
#if($sslDepSet == false)
        <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-ssl</artifactId>
            <version>${D}{mule.version}</version>
            <scope>provided</scope>
        </dependency>
#set($sslDepSet = true)
#end
#elseif($item == 'http' || $item == 'https')
#if($httpDepSet == false)
        <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-http</artifactId>
            <version>${D}{mule.version}</version>
            <scope>provided</scope>
        </dependency>
#set($httpDepSet = true)
#end
#elseif($item == 'jetty' || $item == 'jetty-ssl')
#if($jettyDepSet == false)
        <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-jetty</artifactId>
            <version>${D}{mule.version}</version>
        </dependency>
#set($jettyDepSet = true)
#end
#elseif($item == 'rmi' || $item == 'jnp')
#if($rmiDepSet == false)
	    <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-rmi</artifactId>
            <version>${D}{mule.version}</version>
            <scope>provided</scope>
        </dependency>
#set($rmiDepSet = true)
#end
#else
        <dependency>
            <groupId>org.mule.transports</groupId>
            <artifactId>mule-transport-${item}</artifactId>
            <version>${D}{mule.version}</version>
            <scope>provided</scope>
        </dependency>
#end
#end

        <!-- Mule Modules -->
#foreach($item in $moduleArray)
#if($item != 'doc')
        <dependency>
            <groupId>org.mule.modules</groupId>
            <artifactId>mule-module-${item}</artifactId>
            <version>${D}{mule.version}</version>
            <scope>provided</scope>
        </dependency>
#end
#end
        <!-- for testing -->
        <dependency>
            <groupId>org.mule.tests</groupId>
            <artifactId>mule-tests-functional</artifactId>
            <version>${D}{mule.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>mockobjects</groupId>
            <artifactId>mockobjects-core</artifactId>
            <version>0.09</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.9</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

#if($forgeProject == "y")
    <!-- Mule Forge Configuration -->
    <issueManagement>
        <system>Jira</system>
        <url>http://www.mulesoft.org/jira/browse/${ModuleName.toUpperCase()}</url>
    </issueManagement>

    <scm>
        <connection>scm:svn:http://svn.muleforge.org/${ModuleNameLower}/</connection>
        <developerConnection>scm:svn:https://svn.muleforge.org/${ModuleNameLower}/</developerConnection>
        <tag>HEAD</tag>
        <url>http://svn.${ModuleNameLower}.muleforge.org/</url>
    </scm>


    <ciManagement>
        <system>Bamboo</system>
        <url>http://bamboo.muleforge.org/browse/${ModuleName.toUpperCase()}-FORGE</url>
        <notifiers/>
    </ciManagement>

    <distributionManagement>
        <repository>
            <id>muleforge.webdav.releases</id>
            <url>dav:https://dav.muleforge.org/repository/${ModuleNameLower}/</url>
        </repository>
        <snapshotRepository>
            <id>muleforge.webdav.snapshots</id>
            <url>dav:https://dav.muleforge.org/snapshots.repository/${ModuleNameLower}/</url>
        </snapshotRepository>
        <site>
            <id>muleforge.webdav.sites</id>
            <url>dav:https://dav.muleforge.org/${ModuleNameLower}/</url>
        </site>
    </distributionManagement>
    <!-- End of MuleForge Configuration -->

#end
    <repositories>
        <repository>
            <id>muleforge-repo</id>
            <name>MuleForge Repository</name>
            <url>http://repository.muleforge.org</url>
            <layout>default</layout>
        </repository>

        <repository>
            <id>codehaus-repo</id>
            <name>Codehaus Repository</name>
            <url>http://dist.codehaus.org/mule/dependencies/maven2</url>
            <layout>default</layout>
        </repository>
#if($forgeProject == "y")
        <repository>
            <!-- local repository for this forge project. Users can upload dependencies here when the artifact
                 is not available on any other repository. Its the users' responsibility to make sure that no
                 licenses are violated by uploading dependencies to this location
            -->
            <id>${ModuleNameLower}-deps</id>
            <name>${ModuleName} Dependencies</name>
            <url>http://dist.muleforge.org/${artifactId}/dependencies/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
#end
    </repositories>
</project>
