/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

package org.mule.module.db.config.processor;

import org.mule.module.db.domain.query.QueryType;
import org.mule.module.db.metadata.PreparedBulkUpdateMetadataProvider;
import org.mule.module.db.processor.PreparedBulkUpdateMessageProcessor;

import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.beans.factory.xml.ParserContext;
import org.w3c.dom.Element;

public class PreparedBulkUpdateProcessorBeanDefinitionParser extends AbstractBulkUpdateProcessorBeanDefinitionParser
{

    private BeanDefinition queryBean;
    private final List<QueryType> validQueryTypes;

    public PreparedBulkUpdateProcessorBeanDefinitionParser(List<QueryType> validQueryTypes)
    {
        this.validQueryTypes = validQueryTypes;
    }

    @Override
    protected Class<?> getBeanClass(Element element)
    {
        return PreparedBulkUpdateMessageProcessor.class;
    }

    @Override
    protected void doParseElement(Element element, ParserContext context, BeanDefinitionBuilder builder)
    {
        // We want any parsing to occur as a child of this tag so we need to make
        // a new one that has this as it's owner/parent
        ParserContext nestedCtx = new ParserContext(context.getReaderContext(), context.getDelegate(), builder.getBeanDefinition());

        parseConfig(element, builder);

        queryBean = parameterizedQueryDefinitionParser.parseOptionalQuery(element, nestedCtx, dbConfigResolverFactoryBeanDefinition);
        builder.addConstructorArgValue(queryBean);

        parseSourceExpression(element, builder);
        parseTargetExpression(element, builder);
        parseExecutorFactory(element, builder);
        parseTransactionalAction(element, builder);
        builder.addConstructorArgValue(validQueryTypes);
        parseAutoGeneratedKeys(element, builder);
        parseMetadataProvider(element, builder);
    }

    @Override
    protected Object getMetadataProvider()
    {
        BeanDefinitionBuilder metadataProviderBuilder = BeanDefinitionBuilder.genericBeanDefinition(PreparedBulkUpdateMetadataProvider.class);
        metadataProviderBuilder.addConstructorArgValue(dbConfigResolverFactoryBeanDefinition);
        metadataProviderBuilder.addConstructorArgValue(queryBean);
        metadataProviderBuilder.addConstructorArgValue(autoGeneratedKeyStrategy);

        return metadataProviderBuilder.getBeanDefinition();
    }
}
